CUDA = 0
GCCVer = 4.4
ifdef ICC
	CC := icc 
	CXX := icpc
	OPENMP := -openmp
else
	CC := gcc-$(GCCVer) -std=c99 
	CXX := g++-$(GCCVer)
	OPENMP := -fopenmp
endif
LD = ${CXX}

#DEFS = -D_PORTAUDIO_
DEFS = -D_USE_ALSA_
#DEFS += -D_PIN_BY_LEVEL

ifeq (${CUDA},1)
	DEFS += -D_CUDA_
endif
# -m32 required for CUDA on mac	
DBG = -g -Wall
OPT = -O3 -msse3 -fno-builtin
BASEFLAGS = $(DBG) $(OPT) $(DEFS)
CFLAGS= $(BASEFLAGS)
ifdef OMP
	CFLAGS += ${OPENMP}
endif
	


ifndef OSTYPE
	OSTYPE = linux-gnu
endif
#ifeq ($(OSTYPE), darwin10.0)
#CFLAGS += -arch i386 
#cclib_paths = -L/usr/lib -L/usr/local/lib/i386
#LDFLAGS = -arch i386 -bundle -flat_namespace -undefined suppress
#else
ifeq ($(OSTYPE), darwin10.0)
cclib_paths = -L/usr/lib -L/usr/local/lib/x86_64
LDFLAGS = -bundle -flat_namespace -undefined suppress
else
cclib_paths = -L/usr/local/lib -L/usr/local/lib/x86_64
PICFLAGS = -fPIC
LDFLAGS = -shared
endif

CLIBS = -lpthread -lsndfile -lfftw3f -lm /usr/local/lib/libportaudio.a -lgomp -lasound -lrt -ljack #-lportaudio /usr/local/lib/libportaudio.a
#OBJECTS = sigproc_util.o partconvMulti.o runLevel.o threading.o
# uncomment the following line to use ALSA (in addition to defining _USE_ALSA)
OBJECTS = sigproc_util.o partconvMulti.o runLevel.o threading.o ../lib/alibelf64o.a alsa.o 
ifeq (${CUDA},1)
	OBJECTS += runlevel.cuda.o
endif
PIC_OBJS = $(patsubst %.o,%.pic.o,$(OBJECTS))
INCLUDES = sigproc_util.h partconv.h runlevel.h


#TARGETS = overlap_save uniform DFDL DFDLrt benchMFDL uniformRT
TARGETS = pcRTMulti _partconv.so
PYTHON_STUFF = partconv_wrap.cxx partconv.py partconv.pyc


#----- CUDA compilation options -----

cudaroot  := /usr/local/cuda
cuda_sdk_root := /Developer/GPU\ Computing/C/common

nvcc        := $(cudaroot)/bin/nvcc
cuflags     += $(BASEFLAGS) $(opt) $(dbg)
ifneq ($(OSTYPE), darwin10.0)
	piccuflags += -Xcompiler -fPIC
endif
culib_paths := -L$(cudaroot)/lib
cuinc_paths := -I$(cudaroot)/include -I$(cuda_sdk_root)/inc
culibraries := -lcublas -lcufft

#----- C compilation options ------
cinc_paths := -I $(cudaroot)/include -I$(cuda_sdk_root)/inc
cinc_paths += -I/usr/local/include/python2.7 -I/usr/local/lib/python2.7
clibraries := -lcuda -lcudart -lblas
# -----------------------------------

lib_paths   := $(culib_paths) $(cclib_paths) $(clib_paths)
libraries   := $(CLIBS) 
ifeq ($CUDA,1)
	libraries += $(culibraries) $(clibraries) $(cclibraries) 
endif
# --------------------------------


some: pcRTMulti


all: ${TARGETS}

pcRT: pcRT.o ${OBJECTS} ${INCLUDES}
	${CXX} ${CFLAGS} -o $@ $@.o ${OBJECTS} $(lib_paths) ${libraries}

pcRTMulti: pcRTMulti.o ${OBJECTS} ${INCLUDES}
	${CXX} ${CFLAGS} -o $@ $@.o ${OBJECTS} $(lib_paths) ${libraries}

convolve: convolve.o ${OBJECTS} ${INCLUDES}
	${CXX} ${CFLAGS} -o $@ $@.o ${OBJECTS} $(lib_paths) ${libraries}


_partconv.so: partconv_wrap.pic.o ${PIC_OBJS} ${INCLUDES}
	${LD} ${LDFLAGS} -o _partconv.so partconv_wrap.pic.o ${PIC_OBJS} ${lib_paths} ${libraries}

complex_test: complex_test.o
	${CC} ${CFLAGS} -o $@ $@.o $(lib_paths) ${libraries}



%.o: %.c ${INCLUDES}
	${CC} ${CFLAGS} -c $< $(cinc_paths)

%.cuda.o: %.cu
	$(nvcc) -c $^ $(cuflags) $(cuinc_paths) -o $@ 

%.o: %.cpp ${INCLUDES}
	${CXX} ${CFLAGS} -c $< $(cinc_paths)



partconv_wrap.cxx: partconv.i partconv.h
	swig -python -c++ partconv.i

%.pic.o: %.cxx ${INCLUDES}
	${CXX} ${PICFLAGS} ${CFLAGS} -c $< $(cinc_paths) -o $@

%.pic.o: %.c ${INCLUDES}
	${CC} ${PICFLAGS} ${CFLAGS} -c $< $(cinc_paths) -o $@

%.cuda.pic.o: %.cu
	$(nvcc) -c $^ $(piccuflags) $(cuflags) $(cuinc_paths) -o $@ 

%.pic.o: %.cpp ${INCLUDES}
	${CXX} ${PICFLAGS} ${CFLAGS} -c $< $(cinc_paths) -o $@


%.s: %.cpp
	${CXX} ${CFLAGS} -c  -Wa,-ahl=$@ $<

%.s: %.c
	${CC} ${CFLAGS} -c -g -Wa,-ahl=$@ $<


clean:
	rm -f *.bin *.txt *.o *.wav ${TARGETS} ${PYTHON_STUFF}

